---
# NuvOps

AWSTemplateFormatVersion: 2010-09-09
Description: 'VPC: public and private subnets in three availability zones'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: VPC Parameters
        Parameters:
          - ClassB
          - NATGateways
          - TagsName
Parameters:
  ClassB:
    Description: Class B of VPC (10.XXX.0.0/16)
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [1-254]'
    MinValue: 1
    MaxValue: 254
  TagsName:
    Description: Custon tags for all the resources
    Type: String
    Default: Custom
  NATGateways:
    Description: If false, private subnets cannot access the internet
    Default: true
    Type: String
    AllowedValues:
      - true
      - false
Conditions:
  PrivateInternetAccess: !Equals [ !Ref NATGateways, true ]
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub 'vpc-${TagsName}'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'igw-${TagsName}'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetAPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Sub '10.${ClassB}.0.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'A Public-${TagsName}'
        - Key: Subnet
          Value: public
  SubnetAPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Sub '10.${ClassB}.16.0/20'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'A Private-${TagsName}'
        - Key: Subnet
          Value: private
  SubnetBPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Sub '10.${ClassB}.32.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'B Public-${TagsName}'
        - Key: Subnet
          Value: public
  SubnetBPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Sub '10.${ClassB}.48.0/20'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'B Private-${TagsName}'
        - Key: Subnet
          Value: private
  SubnetCPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      CidrBlock: !Sub '10.${ClassB}.64.0/20'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'C Public-${TagsName}'
        - Key: Subnet
          Value: public
  SubnetCPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs ''
      CidrBlock: !Sub '10.${ClassB}.80.0/20'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'C Private-${TagsName}'
        - Key: Subnet
          Value: private
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'A Public-${TagsName}'
  RouteTablePrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'A Private-${TagsName}'
  RouteTableBPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'B Public-${TagsName}'
  RouteTableBPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'B Private-${TagsName}'
  RouteTableCPublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'C Public-${TagsName}'
  RouteTableCPrivate:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'C Private-${TagsName}'
  RouteTableAssociationAPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPublic
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationAPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetAPrivate
      RouteTableId: !Ref RouteTablePrivate
  RouteTableAssociationBPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPublic
      RouteTableId: !Ref RouteTableBPublic
  RouteTableAssociationBPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetBPrivate
      RouteTableId: !Ref RouteTableBPrivate
  RouteTableAssociationCPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPublic
      RouteTableId: !Ref RouteTableCPublic
  RouteTableAssociationCPrivate:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetCPrivate
      RouteTableId: !Ref RouteTableCPrivate


  #####################
  #### NAT GATEWAY ####
  #####################

  NATgatewayA:
   Type: AWS::EC2::NatGateway
   Condition: PrivateInternetAccess
   Properties:
      AllocationId:
         Fn::GetAtt:
         - EIPA
         - AllocationId
      SubnetId:
         Ref: SubnetAPublic
      Tags:
      - Key: Name
        Value: !Sub 'NAT A-${TagsName}'
  NATgatewayB:
   Type: AWS::EC2::NatGateway
   Condition: PrivateInternetAccess
   Properties:
      AllocationId:
         Fn::GetAtt:
         - EIPB
         - AllocationId
      SubnetId:
         Ref: SubnetBPublic
      Tags:
      - Key: Name
        Value: !Sub 'NAT B-${TagsName}'
  NATgatewayC:
   Type: AWS::EC2::NatGateway
   Condition: PrivateInternetAccess
   Properties:
      AllocationId:
         Fn::GetAtt:
         - EIPC
         - AllocationId
      SubnetId:
         Ref: SubnetCPublic
      Tags:
      - Key: Name
        Value: !Sub 'NAT C-${TagsName}'
  EIPA:
     Type: AWS::EC2::EIP
     Condition: PrivateInternetAccess
     Properties:
        Domain: vpc
  EIPB:
     Type: AWS::EC2::EIP
     Condition: PrivateInternetAccess
     Properties:
        Domain: vpc
  EIPC:
     Type: AWS::EC2::EIP
     Condition: PrivateInternetAccess
     Properties:
        Domain: vpc
  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  RouteTablePublicBInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  RouteTablePublicCInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableCPublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  RouteTablePrivateAInternetRoute:
    Type: 'AWS::EC2::Route'
    Condition: PrivateInternetAccess
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATgatewayA
  RouteTablePrivateBInternetRoute:
    Type: 'AWS::EC2::Route'
    Condition: PrivateInternetAccess
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableBPrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATgatewayB
  RouteTablePrivateCInternetRoute:
    Type: 'AWS::EC2::Route'
    Condition: PrivateInternetAccess
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableCPrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATgatewayC

  #######################
  ####Security Groups####
  #######################

  DefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http/ssh to client host
        VpcId:
           Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: !Sub 'Default-SG-${TagsName}'

#########################
######## Outputs ########
#########################

Outputs:
  Template:
    Description: 'nuvops.com template id.'
    Value: 'vpc/vpc-3azs'
  TagsName:
    Description: Tags name.
    Value: !Sub '${TagsName}'
  AZA:
    Description: AZ of A
    Value: !Select
      - 0
      - !GetAZs ''
    Export:
      Name: !Sub '${TagsName}-AZA'
  AZB:
    Description: AZ of B
    Value: !Select
      - 1
      - !GetAZs ''
    Export:
      Name: !Sub '${TagsName}-AZB'
  AZC:
    Description: AZ of C
    Value: !Select
      - 2
      - !GetAZs ''
    Export:
      Name: !Sub '${TagsName}-AZC'
  CidrBlock:
    Description: The set of IP addresses for the VPC.
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub '${TagsName}-CidrBlock'
  VPC:
    Description: VPC.
    Value: !Ref VPC
    Export:
      Name: !Sub '${TagsName}-VPC'
  SubnetAPublic:
    Description: Subnet A public.
    Value: !Ref SubnetAPublic
    Export:
      Name: !Sub '${TagsName}-SubnetAPublic'
  SubnetAPrivate:
    Description: Subnet A private.
    Value: !Ref SubnetAPrivate
    Export:
      Name: !Sub '${TagsName}-SubnetAPrivate'
  SubnetBPublic:
    Description: Subnet B public.
    Value: !Ref SubnetBPublic
    Export:
      Name: !Sub '${TagsName}-SubnetBPublic'
  SubnetBPrivate:
    Description: Subnet B private.
    Value: !Ref SubnetBPrivate
    Export:
      Name: !Sub '${TagsName}-SubnetBPrivate'
  SubnetCPublic:
    Description: Subnet C public.
    Value: !Ref SubnetCPublic
    Export:
      Name: !Sub '${TagsName}-SubnetCPublic'
  SubnetCPrivate:
    Description: Subnet C private.
    Value: !Ref SubnetCPrivate
    Export:
      Name: !Sub '${TagsName}-SubnetCPrivate'
